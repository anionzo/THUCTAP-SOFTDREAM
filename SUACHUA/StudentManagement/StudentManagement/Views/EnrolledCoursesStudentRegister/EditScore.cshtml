@model StudentManagement.Models.EnrolledCoursesStudentRegister

@*@{
    ViewBag.Title = "EditScore";
    Layout = "~/Views/Shared/_Layout.cshtml";
}*@

<h2>Chỉnh sử điểm</h2>


    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Nhập vào điểm của sinh viên</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.MSSV, htmlAttributes: new { @class = "control-label col-md-12" }) :
                <div>
                    <b>
                        @Html.DisplayFor(model => model.MSSV, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.HiddenFor(model => model.MSSV)
                        @Html.ValidationMessageFor(model => model.MSSV, "", new { @class = "text-danger" })
                    </b>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IDEnrolledCourses, htmlAttributes: new { @class = "control-label col-md-12" }) : 
                <b>
                    @Html.DisplayFor(model => model.IDEnrolledCourses, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.HiddenFor(model => model.IDEnrolledCourses)
                    @Html.ValidationMessageFor(model => model.IDEnrolledCourses, "", new { @class = "text-danger" })
                </b>
                  
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CourseWorkScore, htmlAttributes: new { @class = "control-label col-md-12" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CourseWorkScore, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CourseWorkScore, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ExamScore, htmlAttributes: new { @class = "control-label col-md-12" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ExamScore, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ExamScore, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TotalScore, htmlAttributes: new { @class = "control-label col-md-12" }) : 
                <b class="text-danger">
                    @Html.DisplayFor(model => model.TotalScore, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.HiddenFor(model => model.TotalScore)
                    @Html.ValidationMessageFor(model => model.TotalScore, "", new { @class = "text-danger" })
                </b>
            </div>

            <div class="form-group" style="">
                <div class=" col-md-10 p-1" >
                    <input type="submit" value="Save" class="btn btn-primary m-auto h-auto d-block" />
                </div>

            </div>
        </div>
    }
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>

    $.validator.methods.range = function (value, element, param) {
        var globalizedValue = value.replace(",", ".");
        return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
    }

    $.validator.methods.number = function (value, element) {
        return this.optional(element) || /-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
    }
    </script>
}
